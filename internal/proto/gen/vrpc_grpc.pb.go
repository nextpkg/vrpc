// protoc vrpc.proto --go_out=. --go-grpc_out=.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: vrpc.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VRPCService_Call_FullMethodName        = "/vrpc.VRPCService/Call"
	VRPCService_HealthCheck_FullMethodName = "/vrpc.VRPCService/HealthCheck"
)

// VRPCServiceClient is the client API for VRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// vRPC服务定义
type VRPCServiceClient interface {
	Call(ctx context.Context, in *VRPCRequest, opts ...grpc.CallOption) (*VRPCResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type vRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVRPCServiceClient(cc grpc.ClientConnInterface) VRPCServiceClient {
	return &vRPCServiceClient{cc}
}

func (c *vRPCServiceClient) Call(ctx context.Context, in *VRPCRequest, opts ...grpc.CallOption) (*VRPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VRPCResponse)
	err := c.cc.Invoke(ctx, VRPCService_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vRPCServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, VRPCService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VRPCServiceServer is the server API for VRPCService service.
// All implementations must embed UnimplementedVRPCServiceServer
// for forward compatibility.
//
// vRPC服务定义
type VRPCServiceServer interface {
	Call(context.Context, *VRPCRequest) (*VRPCResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedVRPCServiceServer()
}

// UnimplementedVRPCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVRPCServiceServer struct{}

func (UnimplementedVRPCServiceServer) Call(context.Context, *VRPCRequest) (*VRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedVRPCServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedVRPCServiceServer) mustEmbedUnimplementedVRPCServiceServer() {}
func (UnimplementedVRPCServiceServer) testEmbeddedByValue()                     {}

// UnsafeVRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VRPCServiceServer will
// result in compilation errors.
type UnsafeVRPCServiceServer interface {
	mustEmbedUnimplementedVRPCServiceServer()
}

func RegisterVRPCServiceServer(s grpc.ServiceRegistrar, srv VRPCServiceServer) {
	// If the following call pancis, it indicates UnimplementedVRPCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VRPCService_ServiceDesc, srv)
}

func _VRPCService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VRPCServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VRPCService_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VRPCServiceServer).Call(ctx, req.(*VRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VRPCService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VRPCServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VRPCService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VRPCServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VRPCService_ServiceDesc is the grpc.ServiceDesc for VRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vrpc.VRPCService",
	HandlerType: (*VRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _VRPCService_Call_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _VRPCService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vrpc.proto",
}
